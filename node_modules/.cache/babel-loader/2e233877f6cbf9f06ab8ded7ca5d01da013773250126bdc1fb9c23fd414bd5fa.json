{"ast":null,"code":"import { format } from 'date-fns';\nconst encodeQuery = query => encodeURIComponent(query).replace(/\\-/g, '%2D').replace(/\\_/g, '%5F').replace(/\\./g, '%2E').replace(/\\!/g, '%21').replace(/\\~/g, '%7E').replace(/\\*/g, '%2A').replace(/\\'/g, '').replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n\n// .replace(/\\'/g, '%27')\n\n// Function to format date string into necessary pattern\nconst formatDate = (date, pattern) => {\n  const dateArray = date.split('-');\n  const formattedDate = format(new Date(dateArray[2], dateArray[1] - 1, dateArray[0]), pattern);\n  return formattedDate;\n};\n\n// Function to create playlist name string\nconst createPlaylistName = artist => {\n  return `${artist} Setlist`;\n};\n\n// Function to create playlist description string dependent on which variables are available\nconst createPlaylistDescription = (artist, venue, date) => {\n  const artistApostrophe = artist.slice(-1) === 's' ? `${artist}'` : `${artist}'s`;\n  if (artist && venue && date) return `${artistApostrophe} setlist at ${venue} on the ${date}`;\n  if (artist && date) return `${artistApostrophe} setlist on the ${date}`;\n  if (artist && venue) return `${artistApostrophe} setlist at ${venue}`;\n  return `${artistApostrophe} setlist`;\n};\n\n// Get songs with at least 1 search result from Spotify search\nconst songToIDs = songs => {\n  const validSongs = songs.filter(song => song.tracks.total > 0);\n  const songIDs = validSongs.map(song => song.tracks.items[0].id);\n  return songIDs;\n};\n\n// Get songs with at least 1 search result from Spotify search while also strictly matching artist name (potentially prone to error due to being too strict)\nconst songToIDsWithArtistFilter = (songs, artist) => {\n  const validSongs = songs.filter(song => song.tracks.total > 0);\n  const artistTracks = validSongs.filter(song => song.tracks.items[0].artists[0].name.toLowerCase() === artist);\n  const songIDs = artistTracks.map(song => song.tracks.items[0].id);\n  return songIDs;\n};\n\n// Function to get song names where the search to Spotify didnt return any results\nconst getUnfoundSongs = (songObjects, songNames) => {\n  const unfoundSongs = [];\n  songObjects.forEach((song, i) => {\n    if (song.tracks.total === 0) unfoundSongs.push(songNames[i]);\n  });\n  return unfoundSongs;\n};\nexport { encodeQuery, formatDate, createPlaylistName, createPlaylistDescription, songToIDs, songToIDsWithArtistFilter, getUnfoundSongs };","map":{"version":3,"names":["format","encodeQuery","query","encodeURIComponent","replace","formatDate","date","pattern","dateArray","split","formattedDate","Date","createPlaylistName","artist","createPlaylistDescription","venue","artistApostrophe","slice","songToIDs","songs","validSongs","filter","song","tracks","total","songIDs","map","items","id","songToIDsWithArtistFilter","artistTracks","artists","name","toLowerCase","getUnfoundSongs","songObjects","songNames","unfoundSongs","forEach","i","push"],"sources":["/Users/frank/code/TOP/repos/sites/setlist/client/src/methods/methods.js"],"sourcesContent":["import { format } from 'date-fns';\n\nconst encodeQuery = (query) =>\n  encodeURIComponent(query)\n    .replace(/\\-/g, '%2D')\n    .replace(/\\_/g, '%5F')\n    .replace(/\\./g, '%2E')\n    .replace(/\\!/g, '%21')\n    .replace(/\\~/g, '%7E')\n    .replace(/\\*/g, '%2A')\n    .replace(/\\'/g, '')\n    .replace(/\\(/g, '%28')\n    .replace(/\\)/g, '%29');\n\n// .replace(/\\'/g, '%27')\n\n// Function to format date string into necessary pattern\nconst formatDate = (date, pattern) => {\n  const dateArray = date.split('-');\n  const formattedDate = format(new Date(dateArray[2], dateArray[1] - 1, dateArray[0]), pattern);\n  return formattedDate;\n}\n\n// Function to create playlist name string\nconst createPlaylistName = (artist) => {\n  return `${artist} Setlist`;\n}\n\n// Function to create playlist description string dependent on which variables are available\nconst createPlaylistDescription = (artist, venue, date) => {\n  const artistApostrophe = artist.slice(-1) === 's' ? `${artist}'` : `${artist}'s`;\n  if (artist && venue && date) return `${artistApostrophe} setlist at ${venue} on the ${date}`;\n  if (artist && date) return `${artistApostrophe} setlist on the ${date}`;\n  if (artist && venue) return `${artistApostrophe} setlist at ${venue}`;\n  return `${artistApostrophe} setlist`;\n}\n\n// Get songs with at least 1 search result from Spotify search\nconst songToIDs = (songs) => {\n  const validSongs = songs.filter((song) => song.tracks.total > 0);\n  const songIDs = validSongs.map(song => song.tracks.items[0].id);\n  return songIDs;\n}\n\n// Get songs with at least 1 search result from Spotify search while also strictly matching artist name (potentially prone to error due to being too strict)\nconst songToIDsWithArtistFilter = (songs, artist) => {\n  const validSongs = songs.filter((song) => song.tracks.total > 0);\n  const artistTracks = validSongs.filter(song => song.tracks.items[0].artists[0].name.toLowerCase() === artist);\n  const songIDs = artistTracks.map(song => song.tracks.items[0].id);\n  return songIDs;\n}\n\n// Function to get song names where the search to Spotify didnt return any results\nconst getUnfoundSongs = (songObjects, songNames) => {\n  const unfoundSongs = [];\n  songObjects.forEach((song, i) => {\n    if (song.tracks.total === 0) unfoundSongs.push(songNames[i]);\n  });\n  return unfoundSongs;\n}\n\n\n\nexport { encodeQuery, formatDate, createPlaylistName, createPlaylistDescription, songToIDs, songToIDsWithArtistFilter, getUnfoundSongs }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}