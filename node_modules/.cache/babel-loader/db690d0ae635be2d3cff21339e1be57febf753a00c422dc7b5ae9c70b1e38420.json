{"ast":null,"code":"var _jsxFileName = \"/Users/frank/code/TOP/repos/sites/spotlist/src/views/home.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styles from '../styles/home.module.css';\nimport Searchbar from '../components/searchbar/searchbar';\nimport { linkRegex, backendAPI } from '../variables.js';\nimport { AppContext } from '../App.js';\nimport { parseSetlistLink, getNowTime } from '../methods/methods.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const {\n    setPlaylistID,\n    setPlaylistLink,\n    setUnfoundSongs,\n    setCoverSongs,\n    setCreatingPlaylist,\n    playlistName,\n    setPlaylistName,\n    playlistDescription,\n    setPlaylistDescription,\n    setAuthenticated,\n    setAuthenticating,\n    setSetlistError,\n    setAuthError\n  } = useContext(AppContext);\n  let accessToken;\n  const navigate = useNavigate();\n  const TOKEN = \"https://accounts.spotify.com/api/token\";\n  useEffect(() => {\n    checkForAccessToken();\n    onPageLoad();\n  }, []);\n  function checkForAccessToken() {\n    const access = localStorage.getItem('access');\n    if (access === null) return setAuthenticated(false);\n    const accessJSON = JSON.parse(access);\n    if (accessJSON.expiry > getNowTime()) {\n      accessToken = accessJSON.value;\n      setAuthenticated(true);\n    } else {\n      setAuthenticated(false);\n    }\n  }\n  function checkAccessTokenExists() {\n    const access = localStorage.getItem('access');\n    // If accessToken not stored, return false\n    if (access === null) {\n      setAuthenticated(false);\n      return false;\n    }\n    // Parse object in localStorage to JSON\n    const accessJSON = JSON.parse(access);\n    // If accessToken has expired, return false\n    if (accessJSON.expiry < getNowTime()) {\n      setAuthenticated(false);\n      return false;\n    }\n    // If accessToken value is falsy, return false\n    if (!accessJSON.value) {\n      setAuthenticated(false);\n      return false;\n    }\n    // If above conditions not met, accessToken is valid. Set it and return true\n    accessToken = accessJSON.value;\n    setAuthenticated(true);\n    return true;\n  }\n  async function requestAuthLink() {\n    console.log('Requesting Auth Link');\n    try {\n      const data = await fetch(backendAPI + '/auth');\n      const json = await data.json();\n      const url = json.auth;\n      window.location.href = url; // Show Spotify's authorization screen\n    } catch (error) {\n      setAuthError('Unable to connect to Spotify, please try again!');\n    }\n  }\n  function onPageLoad() {\n    if (window.location.search.length > 0) {\n      handleRedirect();\n    }\n  }\n  function handleRedirect() {\n    if (!verifyAuthorisation()) {\n      setAuthError('Spotify account not connected, please try again!');\n      setAuthenticating(false);\n      setAuthenticated(false);\n      navigate('/');\n      return;\n    }\n    setAuthError('');\n    setSetlistError('');\n    const code = getCode();\n    navigate('/');\n    setAuthenticating(true);\n    fetchAccessToken(code);\n  }\n\n  // Function to verify if user granted authorization on Spotify's auth screen.\n  function verifyAuthorisation() {\n    // Get url query\n    const queryString = window.location.search;\n    // If no query, return false\n    if (queryString.length === 0) return false;\n    const urlParams = new URLSearchParams(queryString);\n    const error = urlParams.get('error');\n    // If query contains error parameter (user didnt authorise or other error), return false\n    if (error) return false;\n    // Otherwise return true\n    return true;\n  }\n  function getCode() {\n    let code;\n    const queryString = window.location.search;\n    if (queryString.length > 0) {\n      const urlParams = new URLSearchParams(queryString);\n      code = urlParams.get('code');\n    }\n    return code;\n  }\n  async function fetchAccessToken(code) {\n    const data = await fetch(backendAPI + '/access');\n    const json = await data.json();\n    const query1 = json.query1;\n    const query2 = json.query2;\n    const query = query1 + '&code=' + code + query2;\n    callAuthorizationApi(query);\n  }\n  function callAuthorizationApi(body) {\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", TOKEN, true);\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.setRequestHeader('Authorization', 'Basic ' + btoa('0d453f304c284edca80fef86ba63f57c' + \":\" + 'd4a0686ea42f418a92521bd7e884d221'));\n    xhr.send(body);\n    xhr.onload = handleAuthorizationResponse;\n  }\n  function handleAuthorizationResponse() {\n    if (this.status === 200) {\n      var data = JSON.parse(this.responseText);\n      let access_token = data.access_token;\n      let refresh_token = data.refresh_token;\n      let expiry = data.expires_in;\n      setAuthenticated(true);\n      setAuthenticating(false);\n      storeAccessToken(access_token, expiry);\n    } else {\n      console.log('Unsucessful Response');\n      console.log(this.responseText);\n      setAuthError('Unable to connect to your Spotify account, please try again');\n    }\n  }\n  function storeAccessToken(key, expiry) {\n    const access = {\n      value: key,\n      expiry: getNowTime() + (expiry - 300) * 1000\n    };\n    localStorage.setItem('access', JSON.stringify(access));\n  }\n  function clearPlaylistData() {\n    setPlaylistID(); //Not instant\n    setPlaylistLink(); //Not instant\n    setUnfoundSongs(); //Not instant\n    setCoverSongs(); //Not instant\n  }\n\n  function makePlaylistData(setlist) {\n    setPlaylistID(setlist.playlistID); //Not instant\n    setPlaylistLink(setlist.playlistLink); //Not instant\n    setUnfoundSongs(setlist.unfoundSongs); //Not instant\n    setCoverSongs(setlist.coverSongs); //Not instant\n  }\n\n  function removeErrors() {\n    setAuthError('');\n    setSetlistError('');\n  }\n  async function createPlaylist(url) {\n    if (!url.length) return setSetlistError('No setlist link entered, please try again!');\n    if (!linkRegex.test(url)) return setSetlistError('Not a valid setlist.fm link, please try again!');\n    if (!checkAccessTokenExists()) return setSetlistError('Your Spotify account is not connected, please try again!');\n    setCreatingPlaylist(true);\n    removeErrors();\n    const setlistID = parseSetlistLink(url);\n    try {\n      const data = await fetch(backendAPI + '/setlist', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          setlistID: setlistID,\n          accessToken: accessToken,\n          name: playlistName,\n          description: playlistDescription\n        })\n      });\n      if (data.ok) {\n        const json = await data.json();\n        makePlaylistData(json);\n        navigate('/playlist');\n        setPlaylistName('');\n        setPlaylistDescription('');\n        setCreatingPlaylist(false);\n      } else {\n        // Response returned but unsuccesful (playlist not created)\n        setCreatingPlaylist(false);\n        setSetlistError('Unable to create playlist, please ensure your setlist.fm link is correct and try again!');\n      }\n    } catch (error) {\n      // Unable to fetch from backend API\n      setCreatingPlaylist(false);\n      setSetlistError('Unable to connect to Spotify, please try again!');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.home,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Instantly create a Spotify playlist from any setlist!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" All you have to do is paste a setlist link from \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://www.setlist.fm\",\n          className: styles.underline,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"setlist.fm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 64\n        }, this), \", we look after the rest.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.searchbar,\n      children: /*#__PURE__*/_jsxDEV(Searchbar, {\n        requestAuthLink: requestAuthLink,\n        createPlaylist: createPlaylist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"iYeRMgRXNc0V360tzVxCQTrhd2I=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\n\n// Make website offline compatible as seen in: https://www.youtube.com/watch?v=cmGr0RszHc8\n// Handle user clicking enter when searching (use form better)\n// Implement refresh tokens\n// Mobile styling\n// Add screenshots to manifest.json as seen in https://developer.mozilla.org/en-US/docs/Web/Manifest/screenshots\n// Add icons\n// Change names of folders and repos to Spotlist\n// Add comments\n// Test all errors and add further error handling\n// Change logo\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useContext","useNavigate","styles","Searchbar","linkRegex","backendAPI","AppContext","parseSetlistLink","getNowTime","Home","setPlaylistID","setPlaylistLink","setUnfoundSongs","setCoverSongs","setCreatingPlaylist","playlistName","setPlaylistName","playlistDescription","setPlaylistDescription","setAuthenticated","setAuthenticating","setSetlistError","setAuthError","accessToken","navigate","TOKEN","checkForAccessToken","onPageLoad","access","localStorage","getItem","accessJSON","JSON","parse","expiry","value","checkAccessTokenExists","requestAuthLink","console","log","data","fetch","json","url","auth","window","location","href","error","search","length","handleRedirect","verifyAuthorisation","code","getCode","fetchAccessToken","queryString","urlParams","URLSearchParams","get","query1","query2","query","callAuthorizationApi","body","xhr","XMLHttpRequest","open","setRequestHeader","btoa","send","onload","handleAuthorizationResponse","status","responseText","access_token","refresh_token","expires_in","storeAccessToken","key","setItem","stringify","clearPlaylistData","makePlaylistData","setlist","playlistID","playlistLink","unfoundSongs","coverSongs","removeErrors","createPlaylist","test","setlistID","method","headers","name","description","ok","home","header","underline","searchbar"],"sources":["/Users/frank/code/TOP/repos/sites/spotlist/src/views/home.js"],"sourcesContent":["import { useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styles from '../styles/home.module.css';\nimport Searchbar from '../components/searchbar/searchbar';\nimport { linkRegex, backendAPI } from '../variables.js';\nimport { AppContext } from '../App.js';\nimport { parseSetlistLink, getNowTime } from '../methods/methods.js'\n\nconst Home = () => {\n\n  const { setPlaylistID, setPlaylistLink, setUnfoundSongs, setCoverSongs, setCreatingPlaylist, playlistName, setPlaylistName, playlistDescription, setPlaylistDescription, setAuthenticated, setAuthenticating, setSetlistError, setAuthError } = useContext(AppContext);\n\n  let accessToken;\n  const navigate = useNavigate();\n  const TOKEN = \"https://accounts.spotify.com/api/token\";\n\n  useEffect(() => {\n    checkForAccessToken();\n    onPageLoad();\n  }, [])\n\n  function checkForAccessToken() {\n    const access = localStorage.getItem('access');\n    if (access === null) return setAuthenticated(false);\n\n    const accessJSON = JSON.parse(access);\n    if (accessJSON.expiry > getNowTime()) {\n      accessToken = accessJSON.value;\n      setAuthenticated(true);\n    } else {\n      setAuthenticated(false);\n    }\n  }\n\n  function checkAccessTokenExists() {\n    const access = localStorage.getItem('access');\n    // If accessToken not stored, return false\n    if (access === null) {\n      setAuthenticated(false)\n      return false;\n    }\n    // Parse object in localStorage to JSON\n    const accessJSON = JSON.parse(access);\n    // If accessToken has expired, return false\n    if (accessJSON.expiry < getNowTime()) {\n      setAuthenticated(false);\n      return false;\n    }\n    // If accessToken value is falsy, return false\n    if (!accessJSON.value) {\n      setAuthenticated(false);\n      return false;\n    }\n    // If above conditions not met, accessToken is valid. Set it and return true\n    accessToken = accessJSON.value;\n    setAuthenticated(true);\n    return true;\n  }\n\n  async function requestAuthLink() {\n    console.log('Requesting Auth Link');\n    try {\n      const data = await fetch(backendAPI + '/auth');\n      const json = await data.json();\n      const url = json.auth;\n      window.location.href = url; // Show Spotify's authorization screen\n    } catch(error) {\n      setAuthError('Unable to connect to Spotify, please try again!');\n    }\n  }\n\n  function onPageLoad() {\n    if (window.location.search.length > 0) {\n      handleRedirect();\n    }\n  }\n\n  function handleRedirect() {\n    if (!verifyAuthorisation()) {\n      setAuthError('Spotify account not connected, please try again!');\n      setAuthenticating(false);\n      setAuthenticated(false);\n      navigate('/');\n      return;\n    }\n    setAuthError('');\n    setSetlistError('');\n    const code = getCode();\n    navigate('/');\n    setAuthenticating(true);\n    fetchAccessToken(code);\n  }\n\n  // Function to verify if user granted authorization on Spotify's auth screen.\n  function verifyAuthorisation() {\n    // Get url query\n    const queryString = window.location.search;\n    // If no query, return false\n    if (queryString.length === 0) return false;\n    const urlParams = new URLSearchParams(queryString);\n    const error = urlParams.get('error');\n    // If query contains error parameter (user didnt authorise or other error), return false\n    if (error) return false;\n    // Otherwise return true\n    return true;\n  }\n\n  function getCode() {\n    let code;\n    const queryString = window.location.search;\n    if (queryString.length > 0) {\n      const urlParams = new URLSearchParams(queryString);\n      code = urlParams.get('code');\n    }\n    return code;\n  }\n\n  async function fetchAccessToken(code) {\n    const data = await fetch(backendAPI + '/access');\n    const json = await data.json();\n    const query1 = json.query1;\n    const query2 = json.query2;\n    const query = query1 + '&code=' + code + query2;\n    callAuthorizationApi(query);\n  }\n\n  function callAuthorizationApi(body) {\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", TOKEN, true);\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.setRequestHeader('Authorization', 'Basic ' + btoa('0d453f304c284edca80fef86ba63f57c' + \":\" + 'd4a0686ea42f418a92521bd7e884d221'));\n    xhr.send(body);\n    xhr.onload = handleAuthorizationResponse;\n  }\n\n  function handleAuthorizationResponse() {\n    if (this.status === 200) {\n      var data = JSON.parse(this.responseText);\n      let access_token = data.access_token;\n      let refresh_token = data.refresh_token;\n      let expiry = data.expires_in;\n      setAuthenticated(true);\n      setAuthenticating(false);\n      storeAccessToken(access_token, expiry);\n    } else {\n      console.log('Unsucessful Response');\n      console.log(this.responseText);\n      setAuthError('Unable to connect to your Spotify account, please try again');\n    }\n  }\n\n  function storeAccessToken(key, expiry) {\n    const access = {\n      value: key,\n      expiry: getNowTime() + ((expiry - 300) * 1000)\n    }\n    localStorage.setItem('access', JSON.stringify(access));\n  }\n\n  function clearPlaylistData() {\n    setPlaylistID(); //Not instant\n    setPlaylistLink(); //Not instant\n    setUnfoundSongs(); //Not instant\n    setCoverSongs(); //Not instant\n  }\n\n  function makePlaylistData(setlist) {\n    setPlaylistID(setlist.playlistID); //Not instant\n    setPlaylistLink(setlist.playlistLink); //Not instant\n    setUnfoundSongs(setlist.unfoundSongs); //Not instant\n    setCoverSongs(setlist.coverSongs); //Not instant\n  }\n\n  function removeErrors() {\n    setAuthError('');\n    setSetlistError('');\n  }\n\n  async function createPlaylist(url) {\n    if (!url.length) return setSetlistError('No setlist link entered, please try again!');\n    if (!linkRegex.test(url)) return setSetlistError('Not a valid setlist.fm link, please try again!')\n    if (!checkAccessTokenExists()) return setSetlistError('Your Spotify account is not connected, please try again!');\n    setCreatingPlaylist(true);\n    removeErrors();\n    const setlistID = parseSetlistLink(url);\n    try {\n      const data = await fetch(backendAPI + '/setlist', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          setlistID: setlistID,\n          accessToken: accessToken,\n          name: playlistName,\n          description: playlistDescription\n        })\n      })\n      if (data.ok) {\n        const json = await data.json();\n        makePlaylistData(json);\n        navigate('/playlist');\n        setPlaylistName('');\n        setPlaylistDescription('');\n        setCreatingPlaylist(false);\n      } else {\n        // Response returned but unsuccesful (playlist not created)\n        setCreatingPlaylist(false);\n        setSetlistError('Unable to create playlist, please ensure your setlist.fm link is correct and try again!');\n      }\n    } catch(error) {\n      // Unable to fetch from backend API\n      setCreatingPlaylist(false);\n      setSetlistError('Unable to connect to Spotify, please try again!');\n    }\n  }\n\n  return (\n    <div className={styles.home}>\n      <div className={styles.header}>\n        <h2>Instantly create a Spotify playlist from any setlist!</h2>\n        <span> All you have to do is paste a setlist link from <a href='https://www.setlist.fm' className={styles.underline} target='_blank' rel='noopener noreferrer'>setlist.fm</a>, we look after the rest.</span>\n      </div>\n      <div className={styles.searchbar}>\n        <Searchbar requestAuthLink={requestAuthLink} createPlaylist={createPlaylist}/>\n      </div>\n    </div>\n  )\n}\n\nexport default Home;\n\n// Make website offline compatible as seen in: https://www.youtube.com/watch?v=cmGr0RszHc8\n// Handle user clicking enter when searching (use form better)\n// Implement refresh tokens\n// Mobile styling\n// Add screenshots to manifest.json as seen in https://developer.mozilla.org/en-US/docs/Web/Manifest/screenshots\n// Add icons\n// Change names of folders and repos to Spotlist\n// Add comments\n// Test all errors and add further error handling\n// Change logo\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}