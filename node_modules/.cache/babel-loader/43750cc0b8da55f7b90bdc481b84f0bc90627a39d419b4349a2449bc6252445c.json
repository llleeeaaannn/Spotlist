{"ast":null,"code":"var _jsxFileName = \"/Users/frank/code/TOP/repos/sites/setlist/client/src/views/home.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styles from '../styles/home.module.css';\nimport Searchbar from '../components/searchbar/searchbar';\nimport { AppContext } from '../App.js';\nimport { parseSetlistLink, getNowTime } from '../methods/methods.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const {\n    setPlaylistID,\n    setPlaylistLink,\n    setUnfoundSongs,\n    setCoverSongs,\n    setCreatingPlaylist,\n    playlistName,\n    setPlaylistName,\n    playlistDescription,\n    setPlaylistDescription\n  } = useContext(AppContext);\n  let accessToken;\n  let refreshToken;\n  const redirectURL = 'http://localhost:3000';\n  const TOKEN = \"https://accounts.spotify.com/api/token\";\n  const navigate = useNavigate();\n  useEffect(() => {\n    let access = localStorage.getItem('access');\n    if (access !== null) {\n      access = JSON.parse(auth);\n      if (access.expiry > getNowTime()) {\n        accessToken = access.value;\n      } else new Promise(function (resolve, reject) {});\n      console.log(auth.value, auth.expiry);\n    }\n    onPageLoad();\n  }, []);\n  async function requestAuthLink() {\n    const data = await fetch('http://localhost:4000/auth');\n    const json = await data.json();\n    console.log(json.auth);\n    const url = json.auth;\n    window.location.href = url; // Show Spotify's authorization screen\n  }\n\n  function onPageLoad() {\n    console.log('Page Loaded');\n    if (window.location.search.length > 0) {\n      handleRedirect();\n    }\n  }\n  function handleRedirect() {\n    let code = getCode();\n    navigate('/');\n    fetchAccessToken(code);\n  }\n  function getCode() {\n    let code;\n    const queryString = window.location.search;\n    if (queryString.length > 0) {\n      const urlParams = new URLSearchParams(queryString);\n      code = urlParams.get('code');\n    }\n    return code;\n  }\n  async function fetchAccessToken(code) {\n    const data = await fetch('http://localhost:4000/access');\n    const json = await data.json();\n    const query1 = json.query1;\n    const query2 = json.query2;\n    const query = query1 + '&code=' + code + query2;\n    callAuthorizationApi(query);\n  }\n  function callAuthorizationApi(body) {\n    console.log('Fetching Access Token');\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", TOKEN, true);\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.setRequestHeader('Authorization', 'Basic ' + btoa('0d453f304c284edca80fef86ba63f57c' + \":\" + 'd4a0686ea42f418a92521bd7e884d221'));\n    xhr.send(body);\n    xhr.onload = handleAuthorizationResponse;\n  }\n  function handleAuthorizationResponse() {\n    if (this.status === 200) {\n      var data = JSON.parse(this.responseText);\n      let access_token = data.access_token;\n      let refresh_token = data.refresh_token;\n      let expiry = data.expires_in;\n      console.log(access_token);\n      console.log(refresh_token);\n      console.log(expiry);\n      storeAccessToken(access_token, expiry);\n      // onPageLoad();\n    } else {\n      console.log('Unsucessful Response');\n      console.log(this.responseText);\n    }\n  }\n  function storeAccessToken(key, expiry) {\n    const access = {\n      value: key,\n      expiry: getNowTime() + expiry * 1000\n    };\n    console.log(access);\n    localStorage.setItem('access', JSON.stringify(access));\n  }\n  function clearPlaylistData() {\n    setPlaylistID(); //Not instant\n    setPlaylistLink(); //Not instant\n    setUnfoundSongs(); //Not instant\n    setCoverSongs(); //Not instant\n  }\n\n  function makePlaylistData(setlist) {\n    setPlaylistID(setlist.playlistID); //Not instant\n    setPlaylistLink(setlist.playlistLink); //Not instant\n    setUnfoundSongs(setlist.unfoundSongs); //Not instant\n    setCoverSongs(setlist.coverSongs); //Not instant\n  }\n\n  async function createPlaylist(url) {\n    if (url.length === 0) return console.log('Cancel playlist');\n    setCreatingPlaylist(true);\n    const setlistID = parseSetlistLink(url);\n    const data = await fetch('http://localhost:4000/setlist/' + setlistID, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        setlistID: setlistID,\n        name: playlistName,\n        description: playlistDescription\n      })\n    });\n    const json = await data.json();\n    makePlaylistData(json);\n    navigate('/playlist');\n    setPlaylistName('');\n    setPlaylistDescription('');\n    setCreatingPlaylist(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.home,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Instantly create a Spotify playlist from any setlist!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" All you have to do is paste a setlist link from \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://www.setlist.fm\",\n          className: styles.underline,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"setlist.fm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 64\n        }, this), \", we look after the rest.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.searchbar,\n      children: /*#__PURE__*/_jsxDEV(Searchbar, {\n        requestAuthLink: requestAuthLink,\n        createPlaylist: createPlaylist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"8aZNGSA/IawqK/Rt1eC1j6SjVgI=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nexport default Home;\n\n// Figure out styling\n// Handle user not approving access in Spotify auth flow: https://developer.spotify.com/documentation/general/guides/authorization/code-flow/ (Under response)\n// Error Handling for:\n// No or invalid URL/link when searching\n\n// Add CSS/JS indicators to searchbar options when length is too long\n// Add regex to main searchbar to check for valid setlistfm url\n// Make website offline compatible as seen in: https://www.youtube.com/watch?v=cmGr0RszHc8\n// Put different font (lighter) for input placeholders\n// Handle user clicking enter when searching (use form better\n// Implement refresh tokens\n// Save auth key in local storage with time\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useContext","useNavigate","styles","Searchbar","AppContext","parseSetlistLink","getNowTime","Home","setPlaylistID","setPlaylistLink","setUnfoundSongs","setCoverSongs","setCreatingPlaylist","playlistName","setPlaylistName","playlistDescription","setPlaylistDescription","accessToken","refreshToken","redirectURL","TOKEN","navigate","access","localStorage","getItem","JSON","parse","auth","expiry","value","Promise","resolve","reject","console","log","onPageLoad","requestAuthLink","data","fetch","json","url","window","location","href","search","length","handleRedirect","code","getCode","fetchAccessToken","queryString","urlParams","URLSearchParams","get","query1","query2","query","callAuthorizationApi","body","xhr","XMLHttpRequest","open","setRequestHeader","btoa","send","onload","handleAuthorizationResponse","status","responseText","access_token","refresh_token","expires_in","storeAccessToken","key","setItem","stringify","clearPlaylistData","makePlaylistData","setlist","playlistID","playlistLink","unfoundSongs","coverSongs","createPlaylist","setlistID","method","headers","name","description","home","header","underline","searchbar"],"sources":["/Users/frank/code/TOP/repos/sites/setlist/client/src/views/home.js"],"sourcesContent":["import { useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styles from '../styles/home.module.css';\nimport Searchbar from '../components/searchbar/searchbar';\nimport { AppContext } from '../App.js';\nimport { parseSetlistLink, getNowTime } from '../methods/methods.js'\n\nconst Home = () => {\n\n  const { setPlaylistID, setPlaylistLink, setUnfoundSongs, setCoverSongs, setCreatingPlaylist, playlistName, setPlaylistName, playlistDescription, setPlaylistDescription } = useContext(AppContext);\n\n  let accessToken;\n  let refreshToken;\n\n  const redirectURL = 'http://localhost:3000';\n\n  const TOKEN = \"https://accounts.spotify.com/api/token\";\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    let access = localStorage.getItem('access');\n    if (access !== null)  {\n      access = JSON.parse(auth);\n      if (access.expiry > getNowTime()) {\n        accessToken = access.value;\n      } else new Promise(function(resolve, reject) {\n      \n      });\n      console.log(auth.value, auth.expiry);\n    }\n    onPageLoad();\n  }, [])\n\n  async function requestAuthLink(){\n    const data = await fetch('http://localhost:4000/auth');\n    const json = await data.json();\n    console.log(json.auth);\n    const url = json.auth;\n    window.location.href = url; // Show Spotify's authorization screen\n  }\n\n  function onPageLoad() {\n    console.log('Page Loaded');\n    if (window.location.search.length > 0) {\n      handleRedirect();\n    }\n  }\n\n  function handleRedirect() {\n    let code = getCode();\n    navigate('/');\n    fetchAccessToken(code);\n  }\n\n  function getCode() {\n    let code;\n    const queryString = window.location.search;\n    if (queryString.length > 0) {\n      const urlParams = new URLSearchParams(queryString);\n      code = urlParams.get('code');\n    }\n    return code;\n  }\n\n  async function fetchAccessToken(code) {\n    const data = await fetch('http://localhost:4000/access');\n    const json = await data.json();\n    const query1 = json.query1;\n    const query2 = json.query2;\n    const query = query1 + '&code=' + code + query2;\n    callAuthorizationApi(query);\n  }\n\n  function callAuthorizationApi(body) {\n    console.log('Fetching Access Token');\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", TOKEN, true);\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.setRequestHeader('Authorization', 'Basic ' + btoa('0d453f304c284edca80fef86ba63f57c' + \":\" + 'd4a0686ea42f418a92521bd7e884d221'));\n    xhr.send(body);\n    xhr.onload = handleAuthorizationResponse;\n  }\n\n  function handleAuthorizationResponse() {\n    if (this.status === 200) {\n      var data = JSON.parse(this.responseText);\n      let access_token = data.access_token;\n      let refresh_token = data.refresh_token;\n      let expiry = data.expires_in;\n      console.log(access_token);\n      console.log(refresh_token);\n      console.log(expiry);\n      storeAccessToken(access_token, expiry);\n      // onPageLoad();\n    }\n    else {\n      console.log('Unsucessful Response');\n      console.log(this.responseText);\n    }\n  }\n\n  function storeAccessToken(key, expiry) {\n    const access = {\n      value: key,\n      expiry: getNowTime() + (expiry * 1000)\n    }\n    console.log(access);\n    localStorage.setItem('access', JSON.stringify(access));\n  }\n\n  function clearPlaylistData() {\n    setPlaylistID(); //Not instant\n    setPlaylistLink(); //Not instant\n    setUnfoundSongs(); //Not instant\n    setCoverSongs(); //Not instant\n  }\n\n  function makePlaylistData(setlist) {\n    setPlaylistID(setlist.playlistID); //Not instant\n    setPlaylistLink(setlist.playlistLink); //Not instant\n    setUnfoundSongs(setlist.unfoundSongs); //Not instant\n    setCoverSongs(setlist.coverSongs); //Not instant\n  }\n\n  async function createPlaylist(url) {\n    if (url.length === 0) return console.log('Cancel playlist');\n    setCreatingPlaylist(true);\n    const setlistID = parseSetlistLink(url);\n    const data = await fetch('http://localhost:4000/setlist/' + setlistID, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        setlistID: setlistID,\n        name: playlistName,\n        description: playlistDescription\n      })\n    });\n    const json = await data.json();\n    makePlaylistData(json);\n    navigate('/playlist');\n    setPlaylistName('');\n    setPlaylistDescription('');\n    setCreatingPlaylist(false);\n  }\n\n  return (\n    <div className={styles.home}>\n      <div className={styles.header}>\n        <h2>Instantly create a Spotify playlist from any setlist!</h2>\n        <span> All you have to do is paste a setlist link from <a href='https://www.setlist.fm' className={styles.underline} target='_blank' rel='noopener noreferrer'>setlist.fm</a>, we look after the rest.</span>\n      </div>\n      <div className={styles.searchbar}>\n        <Searchbar requestAuthLink={requestAuthLink} createPlaylist={createPlaylist}/>\n      </div>\n    </div>\n  )\n}\n\nexport default Home;\n\n// Figure out styling\n// Handle user not approving access in Spotify auth flow: https://developer.spotify.com/documentation/general/guides/authorization/code-flow/ (Under response)\n// Error Handling for:\n// No or invalid URL/link when searching\n\n// Add CSS/JS indicators to searchbar options when length is too long\n// Add regex to main searchbar to check for valid setlistfm url\n// Make website offline compatible as seen in: https://www.youtube.com/watch?v=cmGr0RszHc8\n// Put different font (lighter) for input placeholders\n// Handle user clicking enter when searching (use form better\n// Implement refresh tokens\n// Save auth key in local storage with time\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}